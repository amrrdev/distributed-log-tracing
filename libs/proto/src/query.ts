// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: libs/proto/src/query.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { wrappers } from 'protobufjs';
import { Observable } from 'rxjs';
import { Struct } from '../../../google/protobuf/struct';

export const protobufPackage = 'query';

export interface Empty {}

export interface TraceIdRequest {
  traceId: string;
}

export interface Dag {
  traceId: string;
  rootSpanId: string;
  dagJson: { [key: string]: any } | undefined;
}

export interface Log {
  traceId: string;
  parentId: string | null;
  spanId: string;
  service: string;
  message: string;
  level: string | null;
  timestamp: string | null;
}

export interface DagList {
  dags: Dag[];
}

export interface LogList {
  logs: Log[];
}

export const QUERY_PACKAGE_NAME = 'query';

wrappers['.google.protobuf.Struct'] = {
  fromObject: Struct.wrap,
  toObject: Struct.unwrap,
} as any;

export interface QueryServiceClient {
  getLogs(request: Empty): Observable<LogList>;

  getDags(request: Empty): Observable<DagList>;

  getLogsByTraceId(request: TraceIdRequest): Observable<LogList>;

  getDagByTraceId(request: TraceIdRequest): Observable<Dag>;
}

export interface QueryServiceController {
  getLogs(request: Empty): Promise<LogList> | Observable<LogList> | LogList;

  getDags(request: Empty): Promise<DagList> | Observable<DagList> | DagList;

  getLogsByTraceId(
    request: TraceIdRequest,
  ): Promise<LogList> | Observable<LogList> | LogList;

  getDagByTraceId(
    request: TraceIdRequest,
  ): Promise<Dag> | Observable<Dag> | Dag;
}

export function QueryServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'getLogs',
      'getDags',
      'getLogsByTraceId',
      'getDagByTraceId',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('QueryService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('QueryService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const QUERY_SERVICE_NAME = 'QueryService';

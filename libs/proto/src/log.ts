// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: libs/proto/src/log.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "logs";

export enum LogLevel {
  LOG_LEVEL_INFO = "LOG_LEVEL_INFO",
  LOG_LEVEL_DEBUG = "LOG_LEVEL_DEBUG",
  LOG_LEVEL_WARN = "LOG_LEVEL_WARN",
  LOG_LEVEL_ERROR = "LOG_LEVEL_ERROR",
  LOG_LEVEL_FATAL = "LOG_LEVEL_FATAL",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export interface Log {
  traceId: string;
  parentId: string;
  spanId: string;
  service: string;
  message: string;
  level: LogLevel;
  timestamp: Timestamp | undefined;
}

export interface LogAck {
  status: string;
}

export const LOGS_PACKAGE_NAME = "logs";

export interface LogIngestionServiceClient {
  sendLog(request: Log): Observable<LogAck>;
}

export interface LogIngestionServiceController {
  sendLog(request: Log): Promise<LogAck> | Observable<LogAck> | LogAck;
}

export function LogIngestionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["sendLog"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("LogIngestionService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("LogIngestionService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const LOG_INGESTION_SERVICE_NAME = "LogIngestionService";
